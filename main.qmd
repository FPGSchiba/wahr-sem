---
title: "Semester Arbeit: Schweizer Abstimmungen"
author: "Bratschi Jonas, Erhardt Jann, Gamper Gian"
format: pdf
editor: visual
---

## Einleitung

Wie viel Abfall entsteht nach einem Stadtfest? (unentsorgt und entsorgt)

Beispiel: Zürich fest

Anzahl Personen: Poisson

Wetter: Binomial

Alter: Normal

## Überlegungen

Zeit-Slots: 2 am Freitag, 3 am Samstag, 2 am Sonntag

Slot 1: Morgen-Mittag

Slot 2: Nachmittag

Slot 3: Abend-Nacht

Wetter: Bernoulli (schlecht, schön)

-\> Abhängig davon: Slots bleiben besucher

Essen: Lognormal in abhängigkeit zum Zeit-Slot

Trinken: Lognormal in abhängigkeit zum Zeit-Slot

-\> Bei zu viel Trinken Abfall \* 2 (Abhängig vom Gewicht mit Normalverteilung abhängig von Geschlecht via Bernoulli)

Unfall / Verhaftung -\> Gian

## Simulation

### Statisch

### Experiment

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
#| echo: false
# Load required libraries
library(ggplot2)
library(tidyr)
library(dplyr)
library(scales)

slots <- c("FR Nachmittag", "FR Nacht", "SA Mittag", "SA Nachmittag", "SA Nacht", "SO Mittag", "SO Nachmittag")
wetter_probs <- c(2/3, 1/3)
first_slot <- c(0.10, 0.20)
rest_slots <- c(0.3, 0.4)
bad_weather_factor <- 0.7
essen_e <- c(2, 1, 3)
essen_sd <- c(2, 1, 1)
trinken_e <- c(1, 2, 4)
trinken_sd <- c(1, 1, 3)
nsim <- 10
abfall_produziert <- 0
abfall_gewicht_pro_einheit <- 0.000015 # gweicht in tonnen

calc_mu <- function(E, sd){
  return (log(E) - sd^(2) / 2)
}

essen_mu <- calc_mu(essen_e, essen_sd)
trinken_mu <- calc_mu(trinken_e, trinken_sd)

M <- matrix(NA, nrow = nsim, ncol = length(slots))

for (i in 1:nsim) {
  anzahl_personen <- rpois(1, 2200000)
  wetter_schoen <- sample(c(TRUE, FALSE), size = 1, prob = wetter_probs)
  
  temp_first <- first_slot
  temp_rest <- rest_slots
  
  if (!wetter_schoen) {
    temp_rest <- c(rest_slots[1] * bad_weather_factor, rest_slots[2] * bad_weather_factor)
    temp_first <- c(first_slot[1] * bad_weather_factor, first_slot[2] * bad_weather_factor)
  }
  
  besucher_pro_slot <- c(runif(1, min = first_slot[1], max = first_slot[2]) * anzahl_personen,
                         runif(1, min = rest_slots[1], max = rest_slots[2]) * anzahl_personen,
                         runif(1, min = first_slot[1], max = first_slot[2]) * anzahl_personen,
                         runif(1, min = rest_slots[1], max = rest_slots[2]) * anzahl_personen,
                         runif(1, min = rest_slots[1], max = rest_slots[2]) * anzahl_personen,
                         runif(1, min = first_slot[1], max = first_slot[2]) * anzahl_personen,
                         runif(1, min = rest_slots[1], max = rest_slots[2]) * anzahl_personen)
  
  besucher_pro_slot <- round(besucher_pro_slot)
  #print(sum(besucher_pro_slot))
  
  abfall_pro_slot <- c()
  current_time <- 2
  for (n in 1:length(besucher_pro_slot)) {
    abfall_pro_slot[n] <- sum(rlnorm(besucher_pro_slot[n], essen_mu[current_time], essen_sd[current_time])) + sum(rlnorm(besucher_pro_slot[n], trinken_mu[current_time], trinken_sd[current_time]))
    
    if (current_time == 3) {
    current_time <- 1}
    else {current_time <- current_time + 1}

  }
  M[i,] <- abfall_pro_slot * abfall_gewicht_pro_einheit
}

# Convert the matrix to a data frame
df <- as.data.frame(M)
colnames(df) <- slots

# Reshape the data to long format
df_long <- df %>%
  pivot_longer(cols = everything(), names_to = "Slot", values_to = "Abfall")

# Create the boxplot using ggplot2
ggplot(df_long, aes(x = Slot, y = Abfall)) +
  geom_boxplot() +
  scale_y_continuous(labels = label_comma()) +
  labs(title = "Abfall pro Slot", x = "Zeit Slot", y = "Abfall") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

(mean(rowSums(M)))

```

You can add options to executable code like this

#\| echo: false

2 \* 2

```{r}


```

The `echo: false` option disables the printing of code (only output is displayed).
